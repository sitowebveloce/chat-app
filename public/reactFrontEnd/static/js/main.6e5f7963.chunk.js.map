{"version":3,"sources":["Component/Login.js","Component/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChat","user","setUser","room","setRoom","className","onSubmit","e","preventDefault","length","TextField","id","label","value","onChange","target","variant","type","placeholder","socket","openSocket","ROOT_CSS","css","height","Chat","React","useState","msg","setMsg","users","setUsers","message","setMessage","messages","setMessages","alert","setAlert","country","setCountry","username","city","setCity","inputMsg","useRef","funcFetch","a","axios","get","fetch","response","data","geoplugin_regionName","geoplugin_countryCode","useEffect","emit","on","undefined","current","addEventListener","showUsers","map","u","join","showMsgs","m","key","uuidv4","time","text","role","src","alt","setTimeout","ref","style","margin","helperText","fullWidth","InputLabelProps","shrink","App","chat","setChat","aria-label","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6e5f7963.chunk.js","sourcesContent":["import React from 'react'\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import Button from '@material-ui/core/Button';\r\nimport './Login.css';\r\n\r\n//\r\n// ─── EPORT FUNCTION ─────────────────────────────────────────────────────────────\r\n\r\nexport default function Login(props) {\r\n\r\n    // Deconstruct props\r\n    const {handleChat, user, setUser, room, setRoom} = props;\r\n    // Styles\r\n    // const classes = useStyles();\r\n\r\n    //\r\n    // ─── FUNCTIONS ──────────────────────────────────────────────────────────────────\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        // If name and room are not empty sho chat\r\n        if(user.length > 0 && room.length > 0){\r\n            handleChat(user, room);\r\n        }\r\n\r\n    }\r\n\r\n    //\r\n    // ─── RETURN ─────────────────────────────────────────────────────────────────────\r\n    //\r\n    return (\r\n        <div>\r\n           <form className='login-form'  onSubmit={handleSubmit}>\r\n           <TextField \r\n           id=\"outlined-basic\" \r\n           label=\"Username\" \r\n            value={user}\r\n            onChange={(e)=> setUser(e.target.value)}\r\n           variant=\"outlined\" \r\n           />\r\n           \r\n           <TextField \r\n           id=\"outlined-basic\" \r\n           label=\"Room\"\r\n           value={room} \r\n           onChange ={e => setRoom(e.target.value)}\r\n           variant=\"outlined\"\r\n            />\r\n\r\n             <input className='login-btn' type='submit' placeholder='Enter' />\r\n           </form>\r\n        </div>\r\n    )\r\n}\r\n","//\r\n// ─── IMPORT ─────────────────────────────────────────────────────────────────────\r\n\r\nimport React from 'react'\r\nimport './Chat.css';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport ScrollToBottom from 'react-scroll-to-bottom';\r\nimport { css } from 'glamor';\r\n\r\n//─────────── Create socket.io and connect to the server \r\nimport openSocket from 'socket.io-client'; \r\nconst socket = openSocket('localhost:3001');\r\n//───────────\r\n\r\n//─────────── SCROLL\r\nconst ROOT_CSS = css({\r\n  height: 300,\r\n  // width: 400\r\n});\r\n\r\n//\r\n// ─── RFC ────────────────────────────────────────────────────────────────────────\r\n\r\nexport default function Chat(props) {\r\n    //\r\n    // ─── STATE ───────────────────────────────────────────────────────\r\n   \r\n    const [msg, setMsg] = React.useState('');\r\n    const [users, setUsers] = React.useState([]);\r\n    const [message, setMessage] = React.useState({});\r\n    const [messages, setMessages] = React.useState([]);\r\n    const [alert, setAlert] = React.useState(true);\r\n    const [country, setCountry] = React.useState('it');\r\n    \r\n    //─────────── Deconstruct\r\n    const {username, room, city, setCity} = props;\r\n    //─────────── Style\r\n    // const classes = useStyles();\r\n\r\n    //─────────── USEREF TO SELECT ELEMENTS\r\n    const inputMsg = React.useRef();\r\n    \r\n  //\r\n  // ─── GEOLOCALIZATION ────────────────────────────────────────────────\r\n  const funcFetch = async () => {\r\n    let url = 'http://geoplugin.net/json.gp'\r\n    let fetch = await axios.get(url);\r\n    let response = fetch.data;\r\n    // console.log(response.geoplugin_regionName)\r\n    // console.log(response.geoplugin_countryCode)\r\n    setCity(response.geoplugin_regionName);\r\n    setCountry(response.geoplugin_countryCode);\r\n    };\r\n\r\n  //─────────────── Nation flag ──────────────────────────────────────────\r\n  const nationFlag = ()=>{\r\n    let url = `https://www.countryflags.io/${country}/flat/64.png`;\r\n    // console.log(url)\r\n    return url\r\n  };\r\n\r\n    //───────── USEREFFECT SOCKET EVENTS ─────────────────────────────────\r\n    React.useEffect(()=>{\r\n    // Fetch Geolocation info\r\n    funcFetch();\r\n    // ─── ON SINGLE MESSAGE ─────────────────────────────────────────────\r\n    socket.emit('joinRoom', {username, room});\r\n    // Users in the room\r\n    socket.on('roomUsers', ({room, users})=>{\r\n        // Set users\r\n        setUsers(users);  \r\n    });\r\n    // ─── ON SINGLE MESSAGE EVENT ───────────────────────────────────────\r\n    socket.on('message', message => {\r\n        // console.log(message)\r\n        setAlert(true);\r\n        // Set message\r\n        setMessage(message);\r\n    });\r\n     \r\n    //  ─── ALL MESSAGES EVENT ───────────────────────────────────────\r\n\r\n   socket.on('messages', messages => {\r\n      // console.log(message)\r\n      // Set message\r\n      setMessages(messages);\r\n  });\r\n    // ─── TYPING EVENT LISTENER ───────────────────────────────────────\r\n    if(inputMsg.current !== undefined){\r\n      inputMsg.current.addEventListener('keypress', ()=>{\r\n        socket.emit('typing', {username, room});\r\n      });\r\n    }\r\n   \r\n},[]); // Avoid infinite loop\r\n\r\n   //────── Set users\r\n   let showUsers = users.map(u=> {\r\n   return (`🧑 ${u.username}`)\r\n   }).join(' \\n ');\r\n   // Show single message\r\n   let showMsg = ()=>{\r\n    setTimeout(()=>{\r\n     setAlert(false)\r\n     }, 5000)\r\n    //\r\n     return (\r\n      <>\r\n    <p className=\"message\">{message.user} <span className=\"chat-time\">{message.time}</span></p>\r\n    <p className=\"text\">\r\n        {message.text}\t\r\n    </p>\r\n  </>       \r\n     )\r\n   }\r\n  \r\n   //───────── Show message\r\n   let showMsgs = messages.map((m)=> {\r\n    return (\r\n    <div key={uuidv4()} className='div-messages'>\r\n    <p className=\"messages\">{m.user} <span className=\"chat-time\">{m.time}</span></p>\r\n    <p className=\"text\">\r\n        {m.text}\t\r\n    </p>\r\n    </div>\r\n        )\r\n    });\r\n\r\n   //──────────── Handle Submit\r\n   const handleSubmit = (e)=>{\r\n       e.preventDefault();\r\n       // Emit message\r\n       socket.emit('chatMessage', msg);\r\n       // Clear input\r\n       setMsg('');\r\n       // Scroll dows\r\n       // Focus on the input\r\n   }\r\n\r\n    //\r\n    // ─── RETURN ─────────────────────────────────────────────────────────────────────\r\n    return (\r\n        <div className='chat-content'>\r\n\r\n    <div className=\"chat-left\">\r\n       <div> <h3>Room: </h3> {room} </div>\r\n       <div> <h3>User: </h3> <span className='chat-users'> {showUsers}</span>  </div> \r\n       <div> <h3>City: </h3><span role=\"img\"> {city}</span></div> \r\n       <div> <h3>Flag: </h3><img className='chat-flag' src={nationFlag()} alt='flag' /></div> \r\n       </div>  \r\n\r\n        <div className=\"chat-right\">\r\n       \r\n         {\r\n          alert ? \r\n          (\r\n          <div className='div-message'>\r\n              {showMsg()} \r\n          </div>\r\n          )\r\n          : \r\n          (\r\n           <div className='div-message hide'> \r\n           </div>\r\n          )\r\n         }\r\n       \r\n        <ScrollToBottom className={ ROOT_CSS }>\r\n       \r\n        <div className='chat-messages'>\r\n         {\r\n           showMsgs\r\n         }\r\n        </div>\r\n        </ScrollToBottom>\r\n        <div className=\"chat-input-msg\">\r\n        <form onSubmit={handleSubmit}>\r\n        <TextField\r\n          ref={inputMsg}\r\n          className='input-msg'\r\n          id=\"standard-full-width\"\r\n          label=\"\"\r\n          style={{ margin: 8 }}\r\n          placeholder={`${username} do you feel happy?`}\r\n          helperText={`${username} insert a message.`}\r\n          fullWidth\r\n          value={msg}\r\n          onChange={e => setMsg(e.target.value)}\r\n          margin=\"normal\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n        //   variant=\"filled\"\r\n        />\r\n            </form>\r\n\r\n        </div>\r\n        \r\n        </div>\r\n      \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Login from './Component/Login';\nimport Chat from './Component/Chat';\n\nfunction App() {\n  //\n  // ─── STATE ──────────────────────────────────────────────────────────────────────\n  const [chat, setChat] = React.useState(false);\n  const [user, setUser] = React.useState('');\n  const [room, setRoom] = React.useState('');\n  const [city, setCity] = React.useState('');\n\n  // Handle Chat\n  const handleChat = (user, room)=>{\n    // Set state user and room\n    setUser(user);\n    // Show Chat window\n    setChat(!chat)\n  }\n\n  //\n  // ─── RETURN ─────────────────────────────────────────────────────────────────────\n  \n  return (\n    <div className=\"App\">\n      <h1 className='chat-title'> <span role='img'  aria-label='chat'>💬</span> Chat App</h1>\n     {chat ? <a className='chat-exit-btn' href='/'>Exit</a> : null} \n     {chat ? null : <Login \n     handleChat={handleChat} \n     user={user} \n     room={room}\n     setUser={setUser}\n     setRoom={setRoom}\n     />}\n      {chat ? <Chat \n      username={user} \n      room = {room}\n      city={city}\n      setCity={setCity}\n      /> : null }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}